// +build ignore

package main

import (
	"fmt"
	"fyne.io/fyne"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"runtime"
	"strings"
)

const fontFace = "NotoSans"

// renameVariable provides a simple mechanism to specific an alternate variable name for a file resource
func renameVariable(name string) string {
	varName := strings.TrimSuffix(name, filepath.Ext(name))
	switch name {
	case "fyne.png":
		varName = "fynelogo"
	case "check.svg":
		varName = "confirm"
	case "delete.svg":
		varName = "deleteIcon"
	case "check-box.svg":
		varName = "checked"
	case "check-box-blank.svg":
		varName = "unchecked"
	case "NotoSans-Regular.ttf":
		varName = "regular"
	default:
		varName = strings.ToLower(varName)
	}
	return varName
}

// formatVariable returns a camelCase representation of the `name` parameter's argument
func formatVariable(name string) string {
	newName := renameVariable(name)
	noHyphens := strings.Replace(newName, "-", " ", -1)
	noUnderscores := strings.Replace(noHyphens, "_", " ", -1)
	concatName := strings.Replace(strings.Title(noUnderscores), " ", "", -1)
	// cast the first letter to lowercase and re-combine the string
	for i, v := range concatName {
		return strings.ToLower(string(v)) + concatName[i+1:]
	}
	return newName
}

func bundleFile(name string, filepath string, f *os.File, adoptIconColor bool) {
	bytes, err := ioutil.ReadFile(filepath)
	if err != nil {
		fyne.LogError("Unable to load file "+filepath, err)
		return
	}
	res := fyne.NewStaticResource(path.Base(filepath), bytes, adoptIconColor)

	_, err = f.WriteString(fmt.Sprintf("var %s = %#v\n", formatVariable(name), res))
	if err != nil {
		fyne.LogError("Unable to write to bundled file", err)
	}
}

func bundleFont(font, name string, f *os.File) {
	_, dirname, _, _ := runtime.Caller(0)
	path := path.Join(path.Dir(dirname), "font", font+"-"+name+".ttf")

	if name == "Regular" && font != fontFace {
		name = "Monospace"
	}

	bundleFile(strings.ToLower(name), path, f, false)
}

func iconDir() string {
	_, dirname, _, _ := runtime.Caller(0)
	return path.Join(path.Dir(dirname), "icons")
}

func bundleVectorIcons(iconDir string, f *os.File) {
	var files []string

	root := iconDir
	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if filepath.Ext(path) == ".svg" {
			files = append(files, path)
		}
		return nil
	})
	if err != nil {
		panic(err)
	}
	for _, file := range files {
		bundleFile(path.Base(file), file, f, true)
	}
}

func openFile(filename string) *os.File {
	os.Remove(filename)
	_, dirname, _, _ := runtime.Caller(0)
	f, err := os.Create(path.Join(path.Dir(dirname), filename))
	if err != nil {
		fyne.LogError("Unable to open file "+filename, err)
		return nil
	}

	_, err = f.WriteString("// **** THIS FILE AUTOGENERATED, DO NOT EDIT **** //\n\npackage theme\n\nimport \"fyne.io/fyne\"\n\n")
	if err != nil {
		fyne.LogError("Unable to write file "+filename, err)
		return nil
	}

	return f
}

func main() {
	// Generate the bundled-fonts.go file
	f := openFile("bundled-fonts.go")
	if f == nil {
		return
	}
	bundleFont(fontFace, "Regular", f)
	bundleFont(fontFace, "Bold", f)
	bundleFont(fontFace, "Italic", f)
	bundleFont(fontFace, "BoldItalic", f)
	bundleFont("NotoMono", "Regular", f)
	f.Close()

	// Generate the bundled-icons.go file
	f = openFile("bundled-icons.go")
	if f == nil {
		return
	}
	// Bundle the fyne logo
	logo := path.Join(iconDir(), "fyne.png")
	logoName := renameVariable("fyne.png")
	bundleFile(logoName, logo, f, false)
	// Bundle the vector icons
	bundleVectorIcons(iconDir(), f)

	f.Close()
}

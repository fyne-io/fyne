// auto-generated
// Code generated by '$ fyne bundle'. DO NOT EDIT.

package gl

import "fyne.io/fyne/v2"

var shaderLineFrag = &fyne.StaticResource{
	StaticName: "line.frag",
	StaticContent: []byte(
		"#version 110\n\nuniform vec4 color;\nuniform float lineWidth;\nuniform float feather;\n\nvarying vec2 delta;\n\nvoid main() {\n    float alpha = color.a;\n    float distance = length(delta);\n\n    if (feather == 0.0 || distance <= lineWidth - feather) {\n        gl_FragColor = color;\n    } else {\n        gl_FragColor = vec4(color.r, color.g, color.b, mix(color.a, 0.0, (distance - (lineWidth - feather)) / feather));\n    }\n}\n"),
}
var shaderLineVert = &fyne.StaticResource{
	StaticName: "line.vert",
	StaticContent: []byte(
		"#version 110\n\nattribute vec2 vert;\nattribute vec2 normal;\n    \nuniform float lineWidth;\n\nvarying vec2 delta;\n\nvoid main() {\n    delta = normal * lineWidth;\n\n    gl_Position = vec4(vert + delta, 0, 1);\n}\n"),
}
var shaderLineesFrag = &fyne.StaticResource{
	StaticName: "line_es.frag",
	StaticContent: []byte(
		"#version 100\n\n#ifdef GL_ES\n# ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n# else\nprecision mediump float;\n#endif\nprecision mediump int;\nprecision lowp sampler2D;\n#endif\n\nuniform vec4 color;\nuniform float lineWidth;\nuniform float feather;\n\nvarying vec2 delta;\n\nvoid main() {\n    float alpha = color.a;\n    float distance = length(delta);\n\n    if (feather == 0.0 || distance <= lineWidth - feather) {\n        gl_FragColor = color;\n    } else {\n        gl_FragColor = vec4(color.r, color.g, color.b, mix(color.a, 0.0, (distance - (lineWidth - feather)) / feather));\n    }\n}\n"),
}
var shaderLineesVert = &fyne.StaticResource{
	StaticName: "line_es.vert",
	StaticContent: []byte(
		"#version 100\n\n#ifdef GL_ES\n# ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n# else\nprecision mediump float;\n#endif\nprecision mediump int;\nprecision lowp sampler2D;\n#endif\n\nattribute vec2 vert;\nattribute vec2 normal;\n    \nuniform float lineWidth;\n\nvarying vec2 delta;\n\nvoid main() {\n    delta = normal * lineWidth;\n\n    gl_Position = vec4(vert + delta, 0, 1);\n}\n"),
}
var shaderSimpleFrag = &fyne.StaticResource{
	StaticName: "simple.frag",
	StaticContent: []byte(
		"#version 110\n\nuniform sampler2D tex;\n\nvarying vec2 fragTexCoord;\n\nvoid main() {\n    gl_FragColor = texture2D(tex, fragTexCoord);\n}\n"),
}
var shaderSimpleVert = &fyne.StaticResource{
	StaticName: "simple.vert",
	StaticContent: []byte(
		"#version 110\n\nattribute vec3 vert;\nattribute vec2 vertTexCoord;\nvarying vec2 fragTexCoord;\n\nvoid main() {\n    fragTexCoord = vertTexCoord;\n\n    gl_Position = vec4(vert, 1);\n}"),
}
var shaderSimpleesFrag = &fyne.StaticResource{
	StaticName: "simple_es.frag",
	StaticContent: []byte(
		"#version 100\n\n#ifdef GL_ES\n# ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n# else\nprecision mediump float;\n#endif\nprecision mediump int;\nprecision lowp sampler2D;\n#endif\n\nuniform sampler2D tex;\n\nvarying vec2 fragTexCoord;\n\nvoid main() {\n    gl_FragColor = texture2D(tex, fragTexCoord);\n}\n"),
}
var shaderSimpleesVert = &fyne.StaticResource{
	StaticName: "simple_es.vert",
	StaticContent: []byte(
		"#version 100\n\n#ifdef GL_ES\n# ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n# else\nprecision mediump float;\n#endif\nprecision mediump int;\nprecision lowp sampler2D;\n#endif\n\nattribute vec3 vert;\nattribute vec2 vertTexCoord;\nvarying vec2 fragTexCoord;\n\nvoid main() {\n    fragTexCoord = vertTexCoord;\n\n    gl_Position = vec4(vert, 1);\n}"),
}

var shaderRectangleFrag = &fyne.StaticResource{
	StaticName: "rectangle.frag",
	StaticContent: []byte(
		"#version 110\r\n\r\nuniform vec4 fill_color;\r\nuniform vec4 stroke_color;\r\n\r\nvarying vec2 delta;\r\nvarying float switch_var;\r\nvarying float lineWidth_var;\r\nvarying float feather_var;\r\nvec4 color;\r\n\r\nvoid main() {\r\n    if ( switch_var == 1.0 ){\r\n        color = fill_color;\r\n    }; \r\n    if ( switch_var == 2.0 ){\t\r\n        color = stroke_color;\r\n    };\r\n    if ( switch_var > 50.0 ){\t\r\n        color = vec4(stroke_color.r, stroke_color.g, stroke_color.b, stroke_color.a * switch_var / 100.0 );\r\n    };\r\n    if ( switch_var >= 10.0 && switch_var <= 50.0 ){\t\r\n        color = vec4(fill_color.r, fill_color.g, fill_color.b, fill_color.a * switch_var / 100.0 );\r\n    };\r\n    if ( delta != vec2(0.0, 0.0) ){\r\n        float distance = length(delta);\r\n\r\n        if (distance <= lineWidth_var - feather_var) {\r\n            gl_FragColor = color;\r\n        } else {\r\n            gl_FragColor = vec4(color.r, color.g, color.b, mix(color.a, 0.0, (distance - (lineWidth_var - feather_var)) / feather_var));\r\n        }\r\n    } else {\r\n        gl_FragColor = color;\r\n    }\r\n}"),
}

var shaderRectangleVert = &fyne.StaticResource{
	StaticName: "rectangle.vert",
	StaticContent: []byte(
		"#version 110\r\n\r\nattribute vec2 vert;\r\nattribute vec2 normal;\r\nattribute float colorSwitch;\r\nattribute float lineWidth;\r\nattribute float feather;\r\n\r\nvarying vec2 delta;\r\nvarying float switch_var;\r\nvarying float lineWidth_var;\r\nvarying float feather_var;\r\n\r\nvoid main() {\r\n    switch_var = colorSwitch;\r\n    lineWidth_var = lineWidth;\r\n    feather_var = feather;\r\n    if ( normal == vec2(0.0, 0.0) ) {\r\n        gl_Position = vec4(vert, 0, 1);\r\n    } else {\r\n        delta = normal * lineWidth_var;\r\n        gl_Position = vec4(vert + delta, 0, 1);\r\n    }\r\n}"),
}

var shaderRectangleesFrag = &fyne.StaticResource{
	StaticName: "rectangle_es.frag",
	StaticContent: []byte(
		"#version 100\r\n\r\n#ifdef GL_ES\r\n# ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n# else\r\nprecision mediump float;\r\n#endif\r\nprecision mediump int;\r\nprecision lowp sampler2D;\r\n#endif\r\n\r\nuniform vec4 fill_color;\r\nuniform vec4 stroke_color;\r\n\r\nvarying vec2 delta;\r\nvarying float switch_var;\r\nvarying float lineWidth_var;\r\nvarying float feather_var;\r\nvec4 color;\r\n\r\nvoid main() {\r\n    if ( switch_var == 1.0 ){\r\n        color = fill_color;\r\n    }; \r\n    if ( switch_var == 2.0 ){\t\r\n        color = stroke_color;\r\n    };\r\n    if ( switch_var > 50.0 ){\t\r\n        color = vec4(stroke_color.r, stroke_color.g, stroke_color.b, stroke_color.a * switch_var / 100.0 );\r\n    };\r\n    if ( switch_var >= 10.0 && switch_var <= 50.0 ){\t\r\n        color = vec4(fill_color.r, fill_color.g, fill_color.b, fill_color.a * switch_var / 100.0 );\r\n    };\r\n    if ( delta != vec2(0.0, 0.0) ){\r\n        float distance = length(delta);\r\n\r\n        if (distance <= lineWidth_var - feather_var) {\r\n            gl_FragColor = color;\r\n        } else {\r\n            gl_FragColor = vec4(color.r, color.g, color.b, mix(color.a, 0.0, (distance - (lineWidth_var - feather_var)) / feather_var));\r\n        }\r\n    } else {\r\n        gl_FragColor = color;\r\n    }\r\n}"),
}

var shaderRectangleesVert = &fyne.StaticResource{
	StaticName: "rectangle_es.vert",
	StaticContent: []byte(
		"#version 100\r\n\r\n#ifdef GL_ES\r\n# ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n# else\r\nprecision mediump float;\r\n#endif\r\nprecision mediump int;\r\nprecision lowp sampler2D;\r\n#endif\r\n\r\nattribute vec2 vert;\r\nattribute vec2 normal;\r\nattribute float colorSwitch;\r\nattribute float lineWidth;\r\nattribute float feather;\r\n\r\nvarying vec2 delta;\r\nvarying float switch_var;\r\nvarying float lineWidth_var;\r\nvarying float feather_var;\r\n\r\nvoid main() {\r\n    switch_var = colorSwitch;\r\n    lineWidth_var = lineWidth;\r\n    feather_var = feather;\r\n    if ( normal == vec2(0.0, 0.0) ) {\r\n        gl_Position = vec4(vert, 0, 1);\r\n    } else {\r\n        delta = normal * lineWidth_var;\r\n        gl_Position = vec4(vert + delta, 0, 1);\r\n    }\r\n}"),
}